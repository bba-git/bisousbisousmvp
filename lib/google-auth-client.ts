export const GOOGLE_AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth"; export const GOOGLE_TOKEN_URL = "https://oauth2.googleapis.com/token"; export const GOOGLE_USERINFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"; export function getGoogleAuthUrl() { const scopes = ["https://www.googleapis.com/auth/calendar", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile"]; const params = new URLSearchParams({ client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!, redirect_uri: process.env.NEXT_PUBLIC_GOOGLE_REDIRECT_URI!, response_type: "code", access_type: "offline", prompt: "consent", scope: scopes.join(" ") }); return `${GOOGLE_AUTH_URL}?${params.toString()}`; } export const getGoogleTokens = async (code: string) => { const response = await fetch(GOOGLE_TOKEN_URL, { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded" }, body: new URLSearchParams({ client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!, client_secret: process.env.GOOGLE_CLIENT_SECRET!, code, redirect_uri: process.env.NEXT_PUBLIC_GOOGLE_REDIRECT_URI!, grant_type: "authorization_code" }) }); if (!response.ok) { throw new Error("Failed to get tokens"); } return response.json(); }; export const refreshGoogleToken = async (refreshToken: string) => { const response = await fetch(GOOGLE_TOKEN_URL, { method: "POST", headers: { "Content-Type": "application/x-www-form-urlencoded" }, body: new URLSearchParams({ client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!, client_secret: process.env.GOOGLE_CLIENT_SECRET!, refresh_token: refreshToken, grant_type: "refresh_token" }) }); if (!response.ok) { throw new Error("Failed to refresh token"); } return response.json(); }; export const getGoogleUserInfo = async (accessToken: string) => { const response = await fetch(GOOGLE_USERINFO_URL, { headers: { Authorization: `Bearer ${accessToken}` } }); if (!response.ok) { throw new Error("Failed to get user info"); } return response.json(); };
